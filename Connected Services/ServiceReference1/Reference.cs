//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Actividad_Integradora_7_Problema_1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.WebService1Soap")]
    public interface WebService1Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sumar", ReplyAction="*")]
        float Sumar(float valor1, float valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sumar", ReplyAction="*")]
        System.Threading.Tasks.Task<float> SumarAsync(float valor1, float valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Restar", ReplyAction="*")]
        float Restar(float valor1, float valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Restar", ReplyAction="*")]
        System.Threading.Tasks.Task<float> RestarAsync(float valor1, float valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Dividir", ReplyAction="*")]
        float Dividir(float valor1, float valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Dividir", ReplyAction="*")]
        System.Threading.Tasks.Task<float> DividirAsync(float valor1, float valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiplicar", ReplyAction="*")]
        float Multiplicar(float valor1, float valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiplicar", ReplyAction="*")]
        System.Threading.Tasks.Task<float> MultiplicarAsync(float valor1, float valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DetectarPar", ReplyAction="*")]
        bool DetectarPar(float valor1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DetectarPar", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DetectarParAsync(float valor1);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebService1SoapChannel : Actividad_Integradora_7_Problema_1.ServiceReference1.WebService1Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebService1SoapClient : System.ServiceModel.ClientBase<Actividad_Integradora_7_Problema_1.ServiceReference1.WebService1Soap>, Actividad_Integradora_7_Problema_1.ServiceReference1.WebService1Soap {
        
        public WebService1SoapClient() {
        }
        
        public WebService1SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public float Sumar(float valor1, float valor2) {
            return base.Channel.Sumar(valor1, valor2);
        }
        
        public System.Threading.Tasks.Task<float> SumarAsync(float valor1, float valor2) {
            return base.Channel.SumarAsync(valor1, valor2);
        }
        
        public float Restar(float valor1, float valor2) {
            return base.Channel.Restar(valor1, valor2);
        }
        
        public System.Threading.Tasks.Task<float> RestarAsync(float valor1, float valor2) {
            return base.Channel.RestarAsync(valor1, valor2);
        }
        
        public float Dividir(float valor1, float valor2) {
            return base.Channel.Dividir(valor1, valor2);
        }
        
        public System.Threading.Tasks.Task<float> DividirAsync(float valor1, float valor2) {
            return base.Channel.DividirAsync(valor1, valor2);
        }
        
        public float Multiplicar(float valor1, float valor2) {
            return base.Channel.Multiplicar(valor1, valor2);
        }
        
        public System.Threading.Tasks.Task<float> MultiplicarAsync(float valor1, float valor2) {
            return base.Channel.MultiplicarAsync(valor1, valor2);
        }
        
        public bool DetectarPar(float valor1) {
            return base.Channel.DetectarPar(valor1);
        }
        
        public System.Threading.Tasks.Task<bool> DetectarParAsync(float valor1) {
            return base.Channel.DetectarParAsync(valor1);
        }
    }
}
